qvDMKAN3a3R9uA

PART  /boot ext3  512M
PART  lvm   vg0   all
LV    vg0   swap  swap swap    10G
LV    vg0   root  /    ext4   50G


Virtualization the real way

 Your server will be installed now, this will take some minutes
             You can abort at any time with CTRL+C ...

         :  Reading configuration                           done
         :  Loading image file variables                    done
         :  Loading ubuntu specific functions               done
   1/17  :  Deleting partitions                             done
   2/17  :  Test partition size                             done
   3/17  :  Creating partitions and /etc/fstab              done
   4/17  :  Creating software RAID level 1                  done
   5/17  :  Creating LVM volumes                            done
   6/17  :  Formatting partitions
         :    formatting /dev/md/0 with ext3                done
         :    formatting /dev/vg0/swap with swap            done
         :    formatting /dev/vg0/root with ext4            done
   7/17  :  Mounting partitions                             done
   8/17  :  Sync time via ntp                               done
         :  Importing public key for image validation       done
   9/17  :  Validating image before starting extraction     done
  10/17  :  Extracting image (local)                        done
  11/17  :  Setting up network config                       done
  12/17  :  Executing additional commands
         :    Setting hostname                              done
         :    Generating new SSH keys                       done
         :    Generating mdadm config                       done
         :    Generating ramdisk                            done
         :    Generating ntp config                         done
  13/17  :  Setting up miscellaneous files                  done
  14/17  :  Configuring authentication
         :    Setting root password                         done
         :    Enabling SSH root login with password         done
  15/17  :  Installing bootloader grub                      done
  16/17  :  Running some ubuntu specific functions          done
  17/17  :  Clearing log files                              done

                  INSTALLATION COMPLETE
   You can now reboot and log in to your new system with
  the same password as you logged in to the rescue system.

root@rescue ~ #


It is very bad to login into server with root privileges, thus we will now create a user with sudo privileges;


adduser prince --ingroup sudo

sed -r \
-e 's/^Port 22$/Port 3838/' \
-e 's/^PermitRootLogin yes$/PermitRootLogin no/' \
-e 's/^X11Forwarding yes$/X11Forwarding no/' \
-e 's/^UsePAM yes$/UsePAM no/' \
-i.`date +%F` /etc/ssh/sshd_config

SECURE THE SERVER.

# iptables -F  # no: don't flush Xen's default forwarding rules
iptables -A FORWARD -j DROP
iptables -A OUTPUT -j ACCEPT

iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT ! -i lo -d 127.0.0.0/8 -j DROP
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p tcp --dport http -j ACCEPT
iptables -A INPUT -p tcp --dport https -j ACCEPT

iptables -N specialips
#iptables -A specialips -s xxx.xxx.xxx.xxx -j RETURN  # a trusted IP address
#iptables -A specialips -s yyy.yyy.yyy.yyy -j RETURN  # ditto
iptables -A specialips -j DROP

iptables -A INPUT -j specialips
iptables -A INPUT -p tcp --dport 3838 -j ACCEPT
iptables -A INPUT -j DROP

iptables-save > /etc/prince.guard

apt-get update && apt-get upgrade -y

#Setup email so we get notification

apt install postfix -y 

#choose the internet, just enter for the rest instructions.

echo 'prince: YourVegasPrince@gmail.com 
root: YourVegasPrince@gmai.com >> /etc/aliases

#generate new aliases with below commands
newaliases

#SETUP Smart Monitoring tools that will report failure or incident on our server
apt-get install smartmontools -y

sed -e 's/^#start_smartd=yes/start_smartd=yes/' -i.`date +%F` /etc/default/smartmontools
cp /etc/smartd.conf /etc/smartd.conf.`date +%F`

echo '
/dev/sda -a -o on -S on -s (S/../.././02|L/../../3/03) -m root -M test
/dev/sdb -a -o on -S on -s (S/../.././04|L/../../7/03) -m root -M test
' > /etc/smartd.conf

#now restart our smartmonitoring tool to take effect with our modifications
service smartmontools restart

cp /etc/fstab /etc/fstab.`date +%F`

nano /etc/fstab  # change defaults to defaults,relatime on /dev/vg0/root

Test that a RAID failure does result in a mail notification.

mdadm --manage --set-faulty /dev/md0 /dev/sdb1

mdadm /dev/md0 -r /dev/sdb1   # remove disk
mdadm /dev/md0 -a /dev/sdb1   # re-add disk




#install xen
aptitude update
aptitude safe-upgrade
aptitude install xen-hypervisor-amd64 xen-tools bridge-utils

Disable saving VM state on dom0 shutdown or store the VM state in a location with enough storage space

By default, Xen automatically saves the state of your virtual machine to disk when your host server shuts down (e.g. when the physical server is rebooted). This is so that it can restore the virtual machine to whatever state is was in when dom0 (your physical server) is back up. This is a very handy feature which can go badly wrong: if you allocate a lot of RAM to your virtual machine, the state of your VM (which is essentially the content of its RAM) can become huge and fill-up your partition.

Whether or not to save VM state and the location where your VM state is going to be saved are defined in the  /etc/default/xendomains config file. So edit this file and either set XENDOMAINS_SAVE to a blank value to disable the feature or make sure that it points to a location with enough storage space.

sed -r \
-e 's/^XENDOMAINS_RESTORE=.*/XENDOMAINS_RESTORE=false/' \
-e 's/^XENDOMAINS_SAVE=.*/XENDOMAINS_SAVE=""/' \
-i.`date +%F` /etc/default/xendomains


echo 'GRUB_CMDLINE_XEN="dom0_mem=1024M"' >> /etc/default/grub


#if you get error when try 'xl' command, then use the command below 
dpkg-divert --divert /etc/grub.d/08_linux_xen --rename /etc/grub.d/20_linux_xen

update-grub

echo '
net.ipv4.conf.default.proxy_arp = 1
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0' >> /etc/sysctl.conf

cp /etc/network/interfaces /etc/network/interfaces.`date +%F`
/*
# yGriFLA27Ke27Z

auto xenbr0
iface xenbr0 inet static
 address nnn.nnn.nnn.nnn
 netmask mmm.mmm.mmm.mmm
 gateway ggg.ggg.ggg.ggg
 bridge_ports eth0
 bridge_stp off
 bridge_fd 1
 bridge_hello 2
 bridge_maxage 12
 
 */

echo 'auto lo
iface lo inet loopback

auto eth0
iface eth0 inet manual

auto xenbr0
iface xenbr0 inet static
 address 178.63.23.85
 netmask 255.255.255.192
 gateway 178.63.23.65
 bridge_ports eth0
 bridge_stp off
 #bridge_fd 1
 #bridge_hello 2
 #bridge_maxage 12 

' > /etc/network/interfaces 
 
pre-up iptables-restore < /etc/prince.guard' > /etc/network/interfaces

#  Cbqj64ppNCWhtJ   bridge_ports eth0
pre-up iptables-restore < /etc/iptables.rules' > /etc/network/interfaces

echo '
net.ipv4.conf.default.proxy_arp = 1
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0' >> /etc/sysctl.conf
Now I get xen to run the appropriate scripts for bridged networking. I also change Dom0 memory settings.

nano /etc/xen/xend-config.sxp

# uncomment:
network-script network-bridge
vif-script vif-bridge

# change:
(dom0-min-mem 1024)
(enable-dom0-ballooning no)
I prefer to prevent DomU (guest) hibernation, because it doesn't seem to work reliably.

sed -r \
-e 's/^XENDOMAINS_RESTORE=.*/XENDOMAINS_RESTORE=false/' \
-e 's/^XENDOMAINS_SAVE=.*/XENDOMAINS_SAVE=""/' \
-i.`date +%F` /etc/default/xendomains

reboot













